name: Apigee Proxy Deployment
on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'apiproxy/**'
  workflow_dispatch:
    inputs:
      proxy_name:
        description: "The name of the API proxy to deploy"
        required: true
        default: "DefaultProxyName"
      environment_group:
        description: "Select environment group"
        required: true
        type: choice
        options:
          - "default"
          - "edd"
          - "homerun"
          - "wow"
          - "wpay"
      environment_type:
        description: "Select environment type(s)"
        required: true
        type: choice
        options:
          - "dev"
          - "test"
          - "uat"
          - "dev,test"
          - "test,uat"
          - "dev,test,uat"
      proxy_directory:
        description: "Directory containing the API proxy files"
        required: false
        default: "apiproxy"

permissions:
  id-token: write
  contents: read

jobs:
  auth:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.auth-step.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth-step
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Get Access Token
        run: |
          TOKEN=$(gcloud auth print-access-token)
          echo "::add-mask::$TOKEN"
          echo "access_token=$TOKEN" >> $GITHUB_OUTPUT

  deploy:
    needs: auth
    uses: atlaspendo/apigeex-cicd/.github/workflows/Reusable-proxy-deploy.yml@main
    with:
      proxy_name: ${{ github.event.inputs.proxy_name || github.event.repository.name }}
      environment_group: ${{ github.event.inputs.environment_group }}
      environment_type: ${{ github.event.inputs.environment_type }}
      proxy_directory: ${{ github.event.inputs.proxy_directory || 'apiproxy' }}
      access_token: ${{ needs.auth.outputs.access_token }}
      runner: 'ubuntu-latest'
    secrets:
      apigee_org: ${{ secrets.APIGEE_ORG }}
      workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      service_account: ${{ secrets.SERVICE_ACCOUNT }}
